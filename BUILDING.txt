=== What You Will Need ===
To build the Quickstep storage explorer, you will need a reasonably
standards-compliant C++ compiler (recent versions of gcc, clang, Intel C++,
Solaris Studio, and Microsoft Visual C++ are known to work), and CMake.

Quickstep depends on, at minimum, cJSON and protocol buffers, but these are
packaged with the source and will be built automatically.


=== Getting CMake ===
CMake is available at:
http://www.cmake.org/cmake/resources/software.html

Most Linux and BSD distributions have a CMake package available in their
respective package managers.

On Mac or Windows, be sure to let the installer put links to the CMake command-
line tools in bin or add them to your PATH.


=== Configuring with CMake ===
CMake recommends building outside of the source tree (a recommendation which we
follow). For your convenience, a "build" directory is provided. cd into the
build directory before running cmake.

Like a conventional configure script, you can configure some settings about how
quickstep is built when you invoke cmake. The most important is the build type.
You can build an unoptimized build with debugging information by doing:
cmake -D CMAKE_BUILD_TYPE=Debug ../src

You can build a fast, optimized release build by doing:
cmake -D CMAKE_BUILD_TYPE=Release ../src


=== Advanced Configuration ===
CMake will automatically find and use your system's default C and C++
compilers. If you wish to use some other compilers, you can specify them on
the cmake command line with the CMAKE_C_COMPILER and CMAKE_CXX_COMPILER
options. For example, if you wish to use clang instead of GCC:
cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_C_COMPILER=clang -D CMAKE_CXX_COMPILER=clang++ ../src

You can configure whether quickstep should use tcmalloc (it does by default).
tcmalloc stands for thread-cacheing malloc, it is a very high- performance
replacement for the standard libc malloc (it's faster than standard malloc in
virtually every case, at the cost of slightly increased up-front memory usage.
It performs especially well in multi-threaded use). Nevertheless, there are a
couple of cases where you don't want to use tcmalloc. The first is when you
plan on using valgrind to check for memory leaks (using tcmalloc causes
valgrind to report 0 bytes leaked for every program). The second is if your OS
doesn't work with tcmalloc for some reason (we default to building without
tcmalloc if CMake detects an OS which is known not to work with it). To build
without tcmalloc, add "-D USE_TCMALLOC=0" to your command line. For example, to
build a debug build without tcmalloc, you would run:
cmake -D CMAKE_BUILD_TYPE=Debug -D USE_TCMALLOC=0 ../src

You can also configure whether quickstep should be built with the Intel PCM
performance monitoring library (this allows cache misses to be measured on
recent Intel CPUs). By default Intel PCM is enabled, but if you encouter
problems building it, you may disable it with "-D USE_INTEL_PCM=0".


=== Building ===
Once cmake finishes, you are ready to actually build quickstep by running
"make" (this will also build dependencies like cJSON, protocol buffers,
tcmalloc, and intel-pcm as necessary). If you want to see the actual commands
that make is running, you can do "make VERBOSE=1".

Note that, where the compiler and linker supports it, RELEASE builds of
quickstep will be built with link-time interprocedural optimizations turned on,
which means that executables may take a very long time to link. This is normal,
and produces a faster and better-optimized binary in the end.


=== Special Note: Building on Windows ===
To build on windows, you will need some variety of Microsoft's C++ compiler and
the nmake tool (either from Visual Studio, Visual C++ Express, or the Windows
SDK).

Once you have the necessary tools installed, run the "Visual Studio Command
Prompt" (use the 64-bit version if you have it). Change into the build
directory and run:
cmake -G "NMake Makefiles" ..\src

The -G "NMake Makefiles" option tells CMake to generate makefiles for the nmake
tool instead of project files for Visual Studio. You can also specify the usual
cmake options like "-D CMAKE_BUILD_TYPE=Release".

Once cmake finishes, run "nmake" to actually build quickstep.


=== Running Quickstep Storage Explorer ===
To use the quickstep storage explorer, run the quickstep_storage_explorer
binary in the build directory. This binary is controlled by a JSON
configuration file. See README.txt for more information on configuring and
running the storage explorer.

